{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Backend Documentation \u00b6 API \u00b6 Authentication \u00b6 Account Management \u00b6 Postman API testing \u00b6 Check out the postman API documentation here (localhost version) Category API Done Time Finished Link to Docs Authentication /signup \u2705 2024-12-07 2:00pm View Docs Account Management /account_create \u2705 2024-12-07 3:10pm View Docs Account Management /account_summary?email=<> \u2705 2024-12-07 3:40pm View Docs Account Management /delete_account?email=<>&account_name=<> \u2705 2024-12-07 4:20pm View Docs Account Management /account_detail View Docs Quick Start \u00b6 Update Documentation \u00b6 Clone project \u00b6 git clone https://github.com/FinTrak-Solutions/Backend.git Install virtual env \u00b6 cd Backend virtualenv venv source venv/bin/activate pip3 install mkdocs Goto dir \u00b6 cd Documentation Modify .md in docs/ \u00b6 # check, update locally mkdocs serve # modify .md in docs/ Build and deploy \u00b6 # build and deploy mkdocs build mkdocs gh-deploy Database Schema \u00b6 Can be found here Project layout \u00b6 TBD","title":"Home"},{"location":"#backend-documentation","text":"","title":"Backend Documentation"},{"location":"#api","text":"","title":"API"},{"location":"#authentication","text":"","title":"Authentication"},{"location":"#account-management","text":"","title":"Account Management"},{"location":"#postman-api-testing","text":"Check out the postman API documentation here (localhost version) Category API Done Time Finished Link to Docs Authentication /signup \u2705 2024-12-07 2:00pm View Docs Account Management /account_create \u2705 2024-12-07 3:10pm View Docs Account Management /account_summary?email=<> \u2705 2024-12-07 3:40pm View Docs Account Management /delete_account?email=<>&account_name=<> \u2705 2024-12-07 4:20pm View Docs Account Management /account_detail View Docs","title":"Postman API testing"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#update-documentation","text":"","title":"Update Documentation"},{"location":"#clone-project","text":"git clone https://github.com/FinTrak-Solutions/Backend.git","title":"Clone project"},{"location":"#install-virtual-env","text":"cd Backend virtualenv venv source venv/bin/activate pip3 install mkdocs","title":"Install virtual env"},{"location":"#goto-dir","text":"cd Documentation","title":"Goto dir"},{"location":"#modify-md-in-docs","text":"# check, update locally mkdocs serve # modify .md in docs/","title":"Modify .md in docs/"},{"location":"#build-and-deploy","text":"# build and deploy mkdocs build mkdocs gh-deploy","title":"Build and deploy"},{"location":"#database-schema","text":"Can be found here","title":"Database Schema"},{"location":"#project-layout","text":"TBD","title":"Project layout"},{"location":"account/","text":"Account Management \u00b6 Create New Account for User POST \u00b6 API \u00b6 /account_create Request: { \"email\": \"test@example.com\", \"type\": \"credit\", \"account_name\": \"td_credit\" } Response: \u00b6 Successfully created: STATUS_CODE : CREATED (201) Message : \"Successfully created account_name \" Failed to create: No email found in user table STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" account_name already exists for current user STATUS_CODE : BAD_REQUEST (400) Message : \"Failed to create new account\" Get Account Overview for User GET \u00b6 API \u00b6 /account_summary?email=wick@example.com Response: \u00b6 Email found STATUS_CODE : OK (200) [ { \"account_id\": 1, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"td_credit\" }, { \"account_id\": 2, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"bmo_credit\" } ] Email Not found STATUS_CODE : OK (200) return empty list in body [] Delete an account for User DELETE \u00b6 API \u00b6 /delete_account?email=<>&account_name=<> Response: \u00b6 Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No such account found for the provided email\" Account not found: STATUS_CODE : OK (200) Message : \"Account successfully deleted\" Get Account Detailed View for User GET \u00b6 API \u00b6 http://127.0.0.1:8000/account_details Request: { \"email\": \"test@example.com\", \"account_name\": \"td_credit\" } Response: [ { \"1\": \"TBD\" }, { \"2\": \"TBD\" } ]","title":"Account Management"},{"location":"account/#account-management","text":"","title":"Account Management"},{"location":"account/#create-new-account-for-user-post","text":"","title":"Create New Account for User POST"},{"location":"account/#api","text":"/account_create Request: { \"email\": \"test@example.com\", \"type\": \"credit\", \"account_name\": \"td_credit\" }","title":"API"},{"location":"account/#response","text":"Successfully created: STATUS_CODE : CREATED (201) Message : \"Successfully created account_name \" Failed to create: No email found in user table STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" account_name already exists for current user STATUS_CODE : BAD_REQUEST (400) Message : \"Failed to create new account\"","title":"Response:"},{"location":"account/#get-account-overview-for-user-get","text":"","title":"Get Account Overview for User GET"},{"location":"account/#api_1","text":"/account_summary?email=wick@example.com","title":"API"},{"location":"account/#response_1","text":"Email found STATUS_CODE : OK (200) [ { \"account_id\": 1, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"td_credit\" }, { \"account_id\": 2, \"email\": \"wick@example.com\", \"account_type\": \"credit\", \"account_name\": \"bmo_credit\" } ] Email Not found STATUS_CODE : OK (200) return empty list in body []","title":"Response:"},{"location":"account/#delete-an-account-for-user-delete","text":"","title":"Delete an account for User DELETE"},{"location":"account/#api_2","text":"/delete_account?email=<>&account_name=<>","title":"API"},{"location":"account/#response_2","text":"Email not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No user found for the provided email\" Account not found: STATUS_CODE : BAD_REQUEST (400) Message : \"No such account found for the provided email\" Account not found: STATUS_CODE : OK (200) Message : \"Account successfully deleted\"","title":"Response:"},{"location":"account/#get-account-detailed-view-for-user-get","text":"","title":"Get Account Detailed View for User GET"},{"location":"account/#api_3","text":"http://127.0.0.1:8000/account_details Request: { \"email\": \"test@example.com\", \"account_name\": \"td_credit\" } Response: [ { \"1\": \"TBD\" }, { \"2\": \"TBD\" } ]","title":"API"},{"location":"authentication/","text":"Authentication \u00b6 Signup POST \u00b6 API \u00b6 /signup Post Body ( Json ) \u00b6 Request: \u00b6 { \"username\": \"John Wick\", \"email\": \"test@example.com\", \"password\": \"123456\" } Response: (String with Status Code) \u00b6 If email exists: password good: STATUS_CODE : OK (200) Message : \" username Login successful\" password bad: STATUS_CODE : BAD_REQUEST (400) Message : \"Invalid password\" If email does not exist: STATUS_CODE : CREATED (201) Message : \"User successfully registered\"","title":"Authentication"},{"location":"authentication/#authentication","text":"","title":"Authentication"},{"location":"authentication/#signup-post","text":"","title":"Signup POST"},{"location":"authentication/#api","text":"/signup","title":"API"},{"location":"authentication/#post-body-json","text":"","title":"Post Body (Json)"},{"location":"authentication/#request","text":"{ \"username\": \"John Wick\", \"email\": \"test@example.com\", \"password\": \"123456\" }","title":"Request:"},{"location":"authentication/#response-string-with-status-code","text":"If email exists: password good: STATUS_CODE : OK (200) Message : \" username Login successful\" password bad: STATUS_CODE : BAD_REQUEST (400) Message : \"Invalid password\" If email does not exist: STATUS_CODE : CREATED (201) Message : \"User successfully registered\"","title":"Response: (String with Status Code)"},{"location":"database/","text":"Database Schema Documentation \u00b6 Introduction \u00b6 This document outlines the updated database schema for the financial tracker application backend, utilizing Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL as the database. The schema is designed to efficiently store and manage user information , financial accounts , transactions , budgets , and categories , ensuring data scalability and consistency. Table of Contents \u00b6 User Table Account Table Transaction Table Category Table Summary of Updates User Table \u00b6 Description \u00b6 Stores user credentials and personal information. Each user is uniquely identified and can have multiple accounts, transactions, and categories associated with them. Schema \u00b6 Field Name Data Type Constraints Description id SERIAL Primary Key Unique identifier for each user. email TEXT Unique, Not Null User's email address. password TEXT Not Null Hashed password for security. username TEXT Not Null User's unique username. Account Table \u00b6 Description \u00b6 Represents financial accounts linked to users. Each account belongs to a user and holds financial transactions. Schema \u00b6 Field Name Data Type Constraints Description account_id SERIAL Primary Key Unique identifier for each account. email TEXT Foreign Key ( User.email ), Not Null Email of the account owner. account_type TEXT Not Null Type of the account (e.g., Credit , Debit , Savings ). account_name TEXT Not Null A descriptive name for the account. Transaction Table \u00b6 Description \u00b6 Logs all financial transactions associated with accounts. Each transaction records details like amount, timestamp, and category. Schema \u00b6 Field Name Data Type Constraints Description trans_id SERIAL Primary Key Unique identifier for each transaction. email TEXT Foreign Key ( User.email ), Not Null Email of the user linked to the transaction. category_id INTEGER Foreign Key ( Category.category_id ) Category classification for the transaction. amount FLOAT8 Not Null Transaction amount (positive or negative). notes TEXT (nullable) Optional Additional notes for the transaction. Category Table \u00b6 Description \u00b6 Provides a way to classify transactions into categories, allowing for detailed financial tracking and reporting. Schema \u00b6 Field Name Data Type Constraints Description category_id SERIAL Primary Key Unique identifier for each category. email TEXT Foreign Key ( User.email ), Not Null Email of the user who owns the category. nickname TEXT Not Null A descriptive name for the category. category_type TEXT Not Null Type of category (e.g., Food , Bills ). budget FLOAT8 Optional Budget associated with this category. budget_freq TEXT Optional Budget frequency ( Daily , Weekly , etc.). Summary of Updates \u00b6 Primary Keys : Added id fields as primary keys in tables where they were missing. Foreign Key Relationships : email links multiple tables to the users table for referential integrity. category_id links the transactions table to the categories table. Field Updates : Added account_name to the accounts table for better account identification. Ensured foreign key constraints for better data consistency. Enumerations and Constraints : Categories and budgets allow classification for better financial tracking. Transaction amounts support both positive and negative values. Scalability and Performance : Schema supports detailed tracking and reporting, optimized for scalability and extensibility.","title":"Database Schema"},{"location":"database/#database-schema-documentation","text":"","title":"Database Schema Documentation"},{"location":"database/#introduction","text":"This document outlines the updated database schema for the financial tracker application backend, utilizing Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL as the database. The schema is designed to efficiently store and manage user information , financial accounts , transactions , budgets , and categories , ensuring data scalability and consistency.","title":"Introduction"},{"location":"database/#table-of-contents","text":"User Table Account Table Transaction Table Category Table Summary of Updates","title":"Table of Contents"},{"location":"database/#user-table","text":"","title":"User Table"},{"location":"database/#description","text":"Stores user credentials and personal information. Each user is uniquely identified and can have multiple accounts, transactions, and categories associated with them.","title":"Description"},{"location":"database/#schema","text":"Field Name Data Type Constraints Description id SERIAL Primary Key Unique identifier for each user. email TEXT Unique, Not Null User's email address. password TEXT Not Null Hashed password for security. username TEXT Not Null User's unique username.","title":"Schema"},{"location":"database/#account-table","text":"","title":"Account Table"},{"location":"database/#description_1","text":"Represents financial accounts linked to users. Each account belongs to a user and holds financial transactions.","title":"Description"},{"location":"database/#schema_1","text":"Field Name Data Type Constraints Description account_id SERIAL Primary Key Unique identifier for each account. email TEXT Foreign Key ( User.email ), Not Null Email of the account owner. account_type TEXT Not Null Type of the account (e.g., Credit , Debit , Savings ). account_name TEXT Not Null A descriptive name for the account.","title":"Schema"},{"location":"database/#transaction-table","text":"","title":"Transaction Table"},{"location":"database/#description_2","text":"Logs all financial transactions associated with accounts. Each transaction records details like amount, timestamp, and category.","title":"Description"},{"location":"database/#schema_2","text":"Field Name Data Type Constraints Description trans_id SERIAL Primary Key Unique identifier for each transaction. email TEXT Foreign Key ( User.email ), Not Null Email of the user linked to the transaction. category_id INTEGER Foreign Key ( Category.category_id ) Category classification for the transaction. amount FLOAT8 Not Null Transaction amount (positive or negative). notes TEXT (nullable) Optional Additional notes for the transaction.","title":"Schema"},{"location":"database/#category-table","text":"","title":"Category Table"},{"location":"database/#description_3","text":"Provides a way to classify transactions into categories, allowing for detailed financial tracking and reporting.","title":"Description"},{"location":"database/#schema_3","text":"Field Name Data Type Constraints Description category_id SERIAL Primary Key Unique identifier for each category. email TEXT Foreign Key ( User.email ), Not Null Email of the user who owns the category. nickname TEXT Not Null A descriptive name for the category. category_type TEXT Not Null Type of category (e.g., Food , Bills ). budget FLOAT8 Optional Budget associated with this category. budget_freq TEXT Optional Budget frequency ( Daily , Weekly , etc.).","title":"Schema"},{"location":"database/#summary-of-updates","text":"Primary Keys : Added id fields as primary keys in tables where they were missing. Foreign Key Relationships : email links multiple tables to the users table for referential integrity. category_id links the transactions table to the categories table. Field Updates : Added account_name to the accounts table for better account identification. Ensured foreign key constraints for better data consistency. Enumerations and Constraints : Categories and budgets allow classification for better financial tracking. Transaction amounts support both positive and negative values. Scalability and Performance : Schema supports detailed tracking and reporting, optimized for scalability and extensibility.","title":"Summary of Updates"}]}