{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Backend Documentation \u00b6 API \u00b6 Authentication \u00b6 Quick Start \u00b6 Update Documentation \u00b6 Clone project \u00b6 git clone https://github.com/FinTrak-Solutions/Backend.git Install virtual env \u00b6 cd Backend virtualenv venv source venv/bin/activate pip3 install mkdocs Goto dir \u00b6 cd Documentation Modify .md in docs/ \u00b6 # check, update locally mkdocs serve # modify .md in docs/ Build and deploy \u00b6 # build and deploy mkdocs build mkdocs gh-deploy Database Schema \u00b6 Can be found here Project layout \u00b6 TBD","title":"Home"},{"location":"#backend-documentation","text":"","title":"Backend Documentation"},{"location":"#api","text":"","title":"API"},{"location":"#authentication","text":"","title":"Authentication"},{"location":"#quick-start","text":"","title":"Quick Start"},{"location":"#update-documentation","text":"","title":"Update Documentation"},{"location":"#clone-project","text":"git clone https://github.com/FinTrak-Solutions/Backend.git","title":"Clone project"},{"location":"#install-virtual-env","text":"cd Backend virtualenv venv source venv/bin/activate pip3 install mkdocs","title":"Install virtual env"},{"location":"#goto-dir","text":"cd Documentation","title":"Goto dir"},{"location":"#modify-md-in-docs","text":"# check, update locally mkdocs serve # modify .md in docs/","title":"Modify .md in docs/"},{"location":"#build-and-deploy","text":"# build and deploy mkdocs build mkdocs gh-deploy","title":"Build and deploy"},{"location":"#database-schema","text":"Can be found here","title":"Database Schema"},{"location":"#project-layout","text":"TBD","title":"Project layout"},{"location":"authentication/","text":"Authentication \u00b6 Signup POST \u00b6 API \u00b6 http://127.0.0.1:8000/signup Post Body ( Json ) \u00b6 { \"email\": \"test@example.com\", \"password\": \"123456\" }","title":"Authentication"},{"location":"authentication/#authentication","text":"","title":"Authentication"},{"location":"authentication/#signup-post","text":"","title":"Signup POST"},{"location":"authentication/#api","text":"http://127.0.0.1:8000/signup","title":"API"},{"location":"authentication/#post-body-json","text":"{ \"email\": \"test@example.com\", \"password\": \"123456\" }","title":"Post Body (Json)"},{"location":"database/","text":"Database Schema Documentation \u00b6 Introduction \u00b6 This document outlines the updated database schema for the financial tracker application backend, utilizing Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL as the database. The schema is designed to efficiently store and manage user information , financial accounts , transactions , budgets , and categories , ensuring data scalability. Table of Contents \u00b6 User Table Account Table Transaction Table Budget Table Category Table Summary of Updates User Table \u00b6 Description \u00b6 Stores user credentials and personal information. Each user is uniquely identified and can have multiple accounts and budgets associated with them. Schema \u00b6 Field Name Data Type Constraints Description id SERIAL Primary Key Unique identifier for each user. email VARCHAR(255) Unique, Not Null User's email address. password VARCHAR(255) Not Null Hashed password for security. first_name VARCHAR(50) Optional User's first name. last_name VARCHAR(50) Optional User's last name. created_at TIMESTAMP Default NOW() Account creation timestamp. updated_at TIMESTAMP Default NOW() , On Update Last account update timestamp. Notes \u00b6 Password Security : Passwords must be stored securely using a hashing algorithm like bcrypt. Email Uniqueness : Enforce a unique constraint to prevent duplicate accounts. Account Table \u00b6 Description \u00b6 Represents financial accounts linked to users, such as bank accounts or credit cards. Each account belongs to a user and holds financial transactions. Schema \u00b6 Field Name Data Type Constraints Description account_id SERIAL Primary Key Unique identifier for each account. user_id INTEGER Foreign Key ( User.id ), Not Null Identifier of the account owner. bank_name VARCHAR(100) Optional Name of the financial institution. account_number VARCHAR(50) Optional, Unique Account number from the bank. account_type ACCOUNT_TYPE_ENUM Not Null Type of account ( Credit , Debit , Saving ). currency VARCHAR(10) Default 'CAD' Currency type of the account balance. created_at TIMESTAMP Default NOW() Account creation timestamp. updated_at TIMESTAMP Default NOW() , On Update Last account update timestamp. Enumerations \u00b6 ACCOUNT_TYPE_ENUM : An enumeration with values 'Credit' , 'Debit' , 'Saving' . Notes \u00b6 Foreign Key Constraint : user_id references User.id to establish ownership. Account Balance Calculation : It's recommended to calculate account balance dynamically from transactions to maintain consistency. Transaction Table \u00b6 Description \u00b6 Logs all financial transactions associated with accounts. Each transaction records details like amount, timestamp, and category. Schema \u00b6 Field Name Data Type Constraints Description transaction_id SERIAL Primary Key Unique identifier for each transaction. account_id INTEGER Foreign Key ( Account.account_id ), Not Null Associated account. amount DECIMAL(15, 2) Not Null Transaction amount (positive or negative). created_at TIMESTAMP Default NOW() Transaction timestamp. description TEXT Optional Additional details about the transaction. category_id INTEGER Foreign Key ( Category.category_id ) Category classification. Notes \u00b6 Amount Significance : Positive amounts indicate deposits; negative amounts indicate withdrawals. Foreign Key Constraints : account_id references Account.account_id . category_id references Category.category_id . Budget Table \u00b6 Description \u00b6 Defines budget limits and expectations for users, potentially per category and over specific time periods. Schema \u00b6 Field Name Data Type Constraints Description budget_id SERIAL Primary Key Unique identifier for each budget. user_id INTEGER Foreign Key ( User.id ), Not Null Owner of the budget. category_id INTEGER Foreign Key ( Category.category_id ), Optional Category for the budget. limit_amount DECIMAL(15, 2) Not Null Maximum spending limit. expectation_amount DECIMAL(15, 2) Optional Expected spending or saving goal. frequency FREQUENCY_ENUM Not Null Budget period ( Daily , Weekly , Monthly , Yearly ). start_date DATE Optional Budget period start date. end_date DATE Optional Budget period end date. Enumerations \u00b6 FREQUENCY_ENUM : An enumeration with values 'Daily' , 'Weekly' , 'Monthly' , 'Yearly' . Notes \u00b6 Per-Category Budgets : If category_id is set, the budget applies to that category; otherwise, it may apply to overall spending. Date Fields : start_date and end_date define custom budget periods if needed. Category Table \u00b6 Description \u00b6 Provides a way to classify transactions and budgets into categories, allowing for detailed financial tracking and reporting. Schema \u00b6 Field Name Data Type Constraints Description category_id SERIAL Primary Key Unique identifier for each category. user_id INTEGER Foreign Key ( User.id ), Optional Owner of the category. name VARCHAR(100) Not Null Category name. description TEXT Optional Additional details about the category. Notes \u00b6 User-Specific Categories : If user_id is set, the category is user-specific; otherwise, it can be a global category. Usage : Categories are linked to transactions and budgets for better organization. Summary of Updates \u00b6 Primary Keys Added : Introduced id fields as primary keys in tables where they were missing ( Transaction , Budget , Category ). Foreign Key Constraints : Clearly defined relationships between tables using foreign keys to enforce referential integrity. Unique Constraints : Enforced uniqueness on User.email to prevent duplicate user accounts. Added unique constraint on Account.account_number if applicable. Data Types and Fields : Replaced ambiguous field names with more descriptive ones (e.g., TIME to created_at ). Clarified AMOUNT in Transaction to allow both positive and negative values. Added description fields for additional details where necessary. Enumerations : Defined enums for ACCOUNT_TYPE and FREQUENCY to standardize allowed values. Recommended using PostgreSQL's ENUM type or lookup tables for better performance and data integrity. Timestamps : Added created_at and updated_at fields to track record creation and modification times. Password Security : Emphasized the importance of hashing passwords before storing them in the database. Normalization : Introduced a Category table to eliminate redundancy and provide better data organization. Additional Fields : Added optional fields like first_name , last_name , currency , start_date , and end_date for enhanced functionality.","title":"Database Schema"},{"location":"database/#database-schema-documentation","text":"","title":"Database Schema Documentation"},{"location":"database/#introduction","text":"This document outlines the updated database schema for the financial tracker application backend, utilizing Rust Rocket for REST API handling, Diesel for database interaction, and PostgreSQL as the database. The schema is designed to efficiently store and manage user information , financial accounts , transactions , budgets , and categories , ensuring data scalability.","title":"Introduction"},{"location":"database/#table-of-contents","text":"User Table Account Table Transaction Table Budget Table Category Table Summary of Updates","title":"Table of Contents"},{"location":"database/#user-table","text":"","title":"User Table"},{"location":"database/#description","text":"Stores user credentials and personal information. Each user is uniquely identified and can have multiple accounts and budgets associated with them.","title":"Description"},{"location":"database/#schema","text":"Field Name Data Type Constraints Description id SERIAL Primary Key Unique identifier for each user. email VARCHAR(255) Unique, Not Null User's email address. password VARCHAR(255) Not Null Hashed password for security. first_name VARCHAR(50) Optional User's first name. last_name VARCHAR(50) Optional User's last name. created_at TIMESTAMP Default NOW() Account creation timestamp. updated_at TIMESTAMP Default NOW() , On Update Last account update timestamp.","title":"Schema"},{"location":"database/#notes","text":"Password Security : Passwords must be stored securely using a hashing algorithm like bcrypt. Email Uniqueness : Enforce a unique constraint to prevent duplicate accounts.","title":"Notes"},{"location":"database/#account-table","text":"","title":"Account Table"},{"location":"database/#description_1","text":"Represents financial accounts linked to users, such as bank accounts or credit cards. Each account belongs to a user and holds financial transactions.","title":"Description"},{"location":"database/#schema_1","text":"Field Name Data Type Constraints Description account_id SERIAL Primary Key Unique identifier for each account. user_id INTEGER Foreign Key ( User.id ), Not Null Identifier of the account owner. bank_name VARCHAR(100) Optional Name of the financial institution. account_number VARCHAR(50) Optional, Unique Account number from the bank. account_type ACCOUNT_TYPE_ENUM Not Null Type of account ( Credit , Debit , Saving ). currency VARCHAR(10) Default 'CAD' Currency type of the account balance. created_at TIMESTAMP Default NOW() Account creation timestamp. updated_at TIMESTAMP Default NOW() , On Update Last account update timestamp.","title":"Schema"},{"location":"database/#enumerations","text":"ACCOUNT_TYPE_ENUM : An enumeration with values 'Credit' , 'Debit' , 'Saving' .","title":"Enumerations"},{"location":"database/#notes_1","text":"Foreign Key Constraint : user_id references User.id to establish ownership. Account Balance Calculation : It's recommended to calculate account balance dynamically from transactions to maintain consistency.","title":"Notes"},{"location":"database/#transaction-table","text":"","title":"Transaction Table"},{"location":"database/#description_2","text":"Logs all financial transactions associated with accounts. Each transaction records details like amount, timestamp, and category.","title":"Description"},{"location":"database/#schema_2","text":"Field Name Data Type Constraints Description transaction_id SERIAL Primary Key Unique identifier for each transaction. account_id INTEGER Foreign Key ( Account.account_id ), Not Null Associated account. amount DECIMAL(15, 2) Not Null Transaction amount (positive or negative). created_at TIMESTAMP Default NOW() Transaction timestamp. description TEXT Optional Additional details about the transaction. category_id INTEGER Foreign Key ( Category.category_id ) Category classification.","title":"Schema"},{"location":"database/#notes_2","text":"Amount Significance : Positive amounts indicate deposits; negative amounts indicate withdrawals. Foreign Key Constraints : account_id references Account.account_id . category_id references Category.category_id .","title":"Notes"},{"location":"database/#budget-table","text":"","title":"Budget Table"},{"location":"database/#description_3","text":"Defines budget limits and expectations for users, potentially per category and over specific time periods.","title":"Description"},{"location":"database/#schema_3","text":"Field Name Data Type Constraints Description budget_id SERIAL Primary Key Unique identifier for each budget. user_id INTEGER Foreign Key ( User.id ), Not Null Owner of the budget. category_id INTEGER Foreign Key ( Category.category_id ), Optional Category for the budget. limit_amount DECIMAL(15, 2) Not Null Maximum spending limit. expectation_amount DECIMAL(15, 2) Optional Expected spending or saving goal. frequency FREQUENCY_ENUM Not Null Budget period ( Daily , Weekly , Monthly , Yearly ). start_date DATE Optional Budget period start date. end_date DATE Optional Budget period end date.","title":"Schema"},{"location":"database/#enumerations_1","text":"FREQUENCY_ENUM : An enumeration with values 'Daily' , 'Weekly' , 'Monthly' , 'Yearly' .","title":"Enumerations"},{"location":"database/#notes_3","text":"Per-Category Budgets : If category_id is set, the budget applies to that category; otherwise, it may apply to overall spending. Date Fields : start_date and end_date define custom budget periods if needed.","title":"Notes"},{"location":"database/#category-table","text":"","title":"Category Table"},{"location":"database/#description_4","text":"Provides a way to classify transactions and budgets into categories, allowing for detailed financial tracking and reporting.","title":"Description"},{"location":"database/#schema_4","text":"Field Name Data Type Constraints Description category_id SERIAL Primary Key Unique identifier for each category. user_id INTEGER Foreign Key ( User.id ), Optional Owner of the category. name VARCHAR(100) Not Null Category name. description TEXT Optional Additional details about the category.","title":"Schema"},{"location":"database/#notes_4","text":"User-Specific Categories : If user_id is set, the category is user-specific; otherwise, it can be a global category. Usage : Categories are linked to transactions and budgets for better organization.","title":"Notes"},{"location":"database/#summary-of-updates","text":"Primary Keys Added : Introduced id fields as primary keys in tables where they were missing ( Transaction , Budget , Category ). Foreign Key Constraints : Clearly defined relationships between tables using foreign keys to enforce referential integrity. Unique Constraints : Enforced uniqueness on User.email to prevent duplicate user accounts. Added unique constraint on Account.account_number if applicable. Data Types and Fields : Replaced ambiguous field names with more descriptive ones (e.g., TIME to created_at ). Clarified AMOUNT in Transaction to allow both positive and negative values. Added description fields for additional details where necessary. Enumerations : Defined enums for ACCOUNT_TYPE and FREQUENCY to standardize allowed values. Recommended using PostgreSQL's ENUM type or lookup tables for better performance and data integrity. Timestamps : Added created_at and updated_at fields to track record creation and modification times. Password Security : Emphasized the importance of hashing passwords before storing them in the database. Normalization : Introduced a Category table to eliminate redundancy and provide better data organization. Additional Fields : Added optional fields like first_name , last_name , currency , start_date , and end_date for enhanced functionality.","title":"Summary of Updates"}]}